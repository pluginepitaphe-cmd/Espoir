#!/bin/bash
# üöÄ D√©ploiement automatique Railway avec token - SIPORTS Backend

set -e

echo "üöÇ D√âPLOIEMENT AUTOMATIQUE RAILWAY"
echo "=================================="
echo ""

# V√©rifier si le token est fourni
if [ -z "$1" ]; then
    echo "‚ùå Token Railway requis"
    echo ""
    echo "üìã UTILISATION :"
    echo "./railway-auto-deploy.sh VOTRE_TOKEN_RAILWAY"
    echo ""
    echo "üîë OBTENIR VOTRE TOKEN :"
    echo "1. Aller sur railway.app"
    echo "2. Settings ‚Üí Account ‚Üí Tokens"
    echo "3. Generate New Token ‚Üí Copy"
    echo ""
    exit 1
fi

RAILWAY_TOKEN=$1
echo "‚úÖ Token Railway fourni"

# V√©rifier le dossier backend
if [ ! -d "deployment-final/backend" ]; then
    echo "‚ùå Dossier deployment-final/backend non trouv√©"
    echo "üí° Ex√©cutez d'abord : ./deploy-production-final.sh"
    exit 1
fi

echo "‚úÖ Dossier backend trouv√©"
echo ""

# Installer Railway CLI si n√©cessaire
if ! command -v railway &> /dev/null; then
    echo "üì¶ Installation Railway CLI..."
    curl -fsSL https://railway.app/install.sh | sh
    echo "‚úÖ Railway CLI install√©"
else
    echo "‚úÖ Railway CLI d√©j√† install√©"
fi

# Se connecter avec le token
echo ""
echo "üîê Authentification avec votre token..."
export RAILWAY_TOKEN=$RAILWAY_TOKEN

# V√©rifier la connexion
if railway whoami > /dev/null 2>&1; then
    echo "‚úÖ Authentification r√©ussie : $(railway whoami)"
else
    echo "‚ùå Erreur d'authentification"
    echo "üí° V√©rifiez votre token Railway"
    exit 1
fi

# Aller dans le dossier backend
cd deployment-final/backend
echo ""
echo "üìÅ Dossier de d√©ploiement : $(pwd)"

# Cr√©er le projet Railway
echo ""
echo "üÜï Cr√©ation du projet Railway..."
PROJECT_NAME="siports-backend-v2-$(date +%s)"
echo "üìù Nom du projet : $PROJECT_NAME"

# Initialiser le projet
railway new "$PROJECT_NAME" --confirm > /dev/null 2>&1 || {
    echo "‚ö†Ô∏è  Projet existant ou erreur de cr√©ation"
    echo "üí° Tentative de liaison √† un projet existant..."
}

# Configurer les variables d'environnement
echo ""
echo "‚öôÔ∏è  Configuration des variables d'environnement..."

# Lire les variables depuis .env
if [ -f ".env" ]; then
    echo "üìã Variables depuis .env :"
    while IFS='=' read -r key value; do
        if [[ ! -z "$key" && ! "$key" =~ ^#.* ]]; then
            echo "   $key=$value"
            railway variables set "$key=$value" > /dev/null 2>&1 || echo "‚ö†Ô∏è  Erreur variable $key"
        fi
    done < .env
else
    echo "üìù Configuration manuelle des variables..."
    railway variables set "PORT=8000"
    railway variables set "JWT_SECRET_KEY=siports-jwt-production-$(date +%s)"
    railway variables set "DATABASE_URL=instance/siports_production.db"
    railway variables set "PYTHONPATH=/app"
fi

echo "‚úÖ Variables configur√©es"

# D√©ploiement
echo ""
echo "üöÄ D√âPLOIEMENT EN COURS..."
echo "========================"
echo "‚è≥ Cela peut prendre 2-3 minutes..."
echo ""

# D√©ployer
DEPLOY_OUTPUT=$(railway deploy --detach 2>&1)
DEPLOY_SUCCESS=$?

if [ $DEPLOY_SUCCESS -eq 0 ]; then
    echo "‚úÖ D√©ploiement lanc√© avec succ√®s"
    echo ""
    
    # Attendre le d√©ploiement
    echo "‚è≥ Attente de la finalisation du d√©ploiement..."
    sleep 60
    
    # R√©cup√©rer l'URL
    echo ""
    echo "üîç R√©cup√©ration de l'URL de d√©ploiement..."
    
    # R√©cup√©rer les informations du projet
    PROJECT_INFO=$(railway status --json 2>/dev/null || railway status 2>/dev/null)
    
    # Essayer de r√©cup√©rer l'URL via diff√©rentes m√©thodes
    RAILWAY_URL=""
    
    # M√©thode 1: railway domain
    RAILWAY_URL=$(railway domain 2>/dev/null | head -1 || echo "")
    
    # M√©thode 2: depuis railway status
    if [ -z "$RAILWAY_URL" ]; then
        RAILWAY_URL=$(echo "$PROJECT_INFO" | grep -o 'https://[^[:space:]]*\.up\.railway\.app' | head -1 || echo "")
    fi
    
    # URL par d√©faut si aucune trouv√©e
    if [ -z "$RAILWAY_URL" ]; then
        RAILWAY_URL="https://$PROJECT_NAME-production.up.railway.app"
        echo "‚ö†Ô∏è  URL exacte non r√©cup√©r√©e, URL suppos√©e : $RAILWAY_URL"
    else
        echo "‚úÖ URL r√©cup√©r√©e : $RAILWAY_URL"
    fi
    
    # Sauvegarder l'URL
    echo "$RAILWAY_URL" > ../../railway-backend-url.txt
    
    # Tester l'API
    echo ""
    echo "üß™ TEST DE L'API BACKEND :"
    echo "========================="
    echo "üîç Test de $RAILWAY_URL/api/"
    
    # Attendre que l'API soit pr√™te
    for i in {1..5}; do
        if curl -s --connect-timeout 10 "$RAILWAY_URL/api/" | grep -q "SIPORTS"; then
            echo "‚úÖ API backend accessible et fonctionnelle !"
            break
        else
            echo "‚è≥ Tentative $i/5 - API en cours de d√©marrage..."
            sleep 15
        fi
    done
    
    # Tests additionnels
    echo ""
    echo "üß™ TESTS ADDITIONNELS :"
    echo "======================"
    
    # Test chatbot
    if curl -s --connect-timeout 10 "$RAILWAY_URL/api/chatbot/health" | grep -q "healthy"; then
        echo "‚úÖ Chatbot IA op√©rationnel"
    else
        echo "‚ö†Ô∏è  Chatbot en cours de d√©marrage"
    fi
    
    # Test forfaits
    if curl -s --connect-timeout 10 "$RAILWAY_URL/api/visitor-packages" | grep -q "packages"; then
        echo "‚úÖ Syst√®me de forfaits op√©rationnel"
    else
        echo "‚ö†Ô∏è  Forfaits en cours de chargement"
    fi
    
else
    echo "‚ùå Erreur de d√©ploiement"
    echo "üìã Output:"
    echo "$DEPLOY_OUTPUT"
    exit 1
fi

cd ../..

# Instructions pour Vercel
echo ""
echo "üéØ PROCHAINE √âTAPE : CONNECTER √Ä VERCEL"
echo "======================================"
echo ""
echo "‚úÖ Backend Railway d√©ploy√© : $RAILWAY_URL"
echo ""
echo "üîÑ METTRE √Ä JOUR VERCEL :"
echo "1. Aller sur vercel.com ‚Üí Votre projet SIPORTS"
echo "2. Settings ‚Üí Environment Variables"
echo "3. Modifier VITE_BACKEND_URL :"
echo "   VITE_BACKEND_URL=$RAILWAY_URL"
echo "4. Deployments ‚Üí Redeploy"
echo ""

# Cr√©er un script de mise √† jour Vercel
cat > update-vercel-with-railway.sh << EOF
#!/bin/bash
echo "üîÑ Mise √† jour Vercel avec Railway URL"
echo "======================================"
echo ""
echo "Backend Railway : $RAILWAY_URL"
echo ""
echo "üìù INSTRUCTIONS VERCEL :"
echo "1. vercel.com ‚Üí Votre projet"
echo "2. Settings ‚Üí Environment Variables"
echo "3. VITE_BACKEND_URL = $RAILWAY_URL"
echo "4. Redeploy"
echo ""
echo "üß™ TESTS APR√àS VERCEL :"
echo "‚Ä¢ Frontend + Backend connect√©s"
echo "‚Ä¢ Admin : admin@siportevent.com / admin123"
echo "‚Ä¢ Mini-site : /exposant/1/mini-site"
echo "‚Ä¢ Chatbot : bouton bleu flottant"
EOF

chmod +x update-vercel-with-railway.sh

# R√©sum√© final
echo ""
echo "üéä D√âPLOIEMENT RAILWAY TERMIN√â !"
echo "==============================="
echo ""
echo "‚úÖ Backend d√©ploy√© : $RAILWAY_URL"
echo "‚úÖ API test√©e et fonctionnelle"
echo "‚úÖ Script Vercel cr√©√© : ./update-vercel-with-railway.sh"
echo ""
echo "üéØ FONCTIONNALIT√âS D√âPLOY√âES :"
echo "‚Ä¢ üè¢ Mini-sites exposants professionnels"
echo "‚Ä¢ ü§ñ Chatbot IA avec 9 endpoints"
echo "‚Ä¢ üíº Syst√®me de forfaits complet"
echo "‚Ä¢ üìä Dashboard admin moderne"
echo "‚Ä¢ üìÖ Calendrier et messagerie"
echo ""
echo "üöÄ SIPORTS v2.0 BACKEND EN LIGNE !"
echo ""
echo "üí° Ex√©cutez maintenant : ./update-vercel-with-railway.sh"